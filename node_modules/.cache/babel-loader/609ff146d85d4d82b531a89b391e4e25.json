{"ast":null,"code":"import _defineProperty from \"/Users/harum/Development/FlatironSchool/top-bun-burgerface/top-bun-burgerface-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/harum/Development/FlatironSchool/top-bun-burgerface/top-bun-burgerface-frontend/src/Container/GameContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment } from \"react\";\nimport BurgerBuildContainer from \"./BurgerBuildContainer\";\nimport Ingredients from \"../Components/Ingredients.js\"; // import Countdown from 'react-countdown-now'\n\nimport Timer from \"../Components/Timer\";\nimport EndGame from \"../Components/EndGame\";\nimport Customers from \"../Components/Customers\";\nexport default class GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.buildBurger = ingr => {\n      if (this.state.clickCounter < 10) {\n        this.setState({\n          currentBurger: [...this.state.currentBurger, ingr],\n          currentBurger2: [...this.state.currentBurger, ingr],\n          clickCounter: this.state.clickCounter + 1\n        });\n      } else {\n        alert(\"stahp\"); // this.setState({\n        //   currentBurger: [],\n        //   currentBurger2: [],\n        //   clickCounter: 0\n        // })\n      }\n    };\n\n    this.burgerSubmit = () => {\n      console.log('clicking the bunnnn');\n      let results = [];\n\n      if (this.state.currentOrderNumber !== null) {\n        for (let i = 0; i < this.state.currentBurger.length; i++) {\n          if (this.state.currentBurger[i].name === this.props.orders[this.state.currentOrderNumber][i]) {\n            results.push(true);\n          } else {\n            alert('You need to pick a burger to work on first!');\n          }\n        }\n\n        if (results.length === 4) {\n          let update = this.state.currentScore;\n          this.setState({\n            currentScore: update + 1\n          });\n        } else {\n          console.log('oops');\n        }\n\n        this.setState({\n          currentBurger: [],\n          currentBurger2: [],\n          currentOrderNumber: null,\n          currentOrderNumber1: Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1,\n          currentOrderNumber2: Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1,\n          currentOrderNumber3: Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1,\n          currentOrderNumber4: Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1,\n          clickCounter: 0\n        });\n      }\n    };\n\n    this.changeGameState = () => {\n      this.setState(_objectSpread({}, this.initialState, {\n        gameEnded: !this.state.gameEnded,\n        modalState: !this.state.modalState,\n        lastScore: this.state.currentScore\n      }));\n    };\n\n    this.customerOrders = () => {\n      return this.props.orders[Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1];\n    };\n\n    this.removeIngredient = () => {\n      this.state.currentBurger.pop();\n      this.state.currentBurger2.shift();\n      this.setState({\n        currentBurger: this.state.currentBurger,\n        currentBurger2: this.state.currentBurger2.reverse(),\n        clickCounter: this.state.clickCounter - 1\n      });\n    };\n\n    this.selectOrder = orderNumber => {\n      this.setState({\n        currentOrderNumber: orderNumber\n      });\n    };\n\n    this.state = this.initialState;\n  }\n\n  get initialState() {\n    return {\n      currentBurger: [],\n      currentBurger2: [],\n      currentOrderNumber: null,\n      currentScore: 0,\n      clickCounter: 0,\n      gameEnded: false,\n      modalState: false,\n      lastScore: 0,\n      currentOrderNumber1: 2,\n      currentOrderNumber2: 3,\n      currentOrderNumber3: 4,\n      currentOrderNumber4: 5\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.gameEnded === false ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \" \\uD83C\\uDF54 Top Bun \\uD83C\\uDF54 \"), React.createElement(Ingredients, {\n      buildBurger: this.buildBurger,\n      burgerSubmit: this.burgerSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"columns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.props.orders[this.state.currentOrderNumber] ? this.props.orders[this.state.currentOrderNumber].map(ingr => React.createElement(\"p\", {\n      key: Math.floor(Math.random() * 1000000) + 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, ingr)) : null), React.createElement(\"div\", {\n      className: \"column is-three-fifths\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(BurgerBuildContainer, {\n      burger: this.state.currentBurger2,\n      orders: this.props.orders,\n      removeIngredient: this.removeIngredient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Current score: \", this.state.currentScore), React.createElement(Timer, {\n      changeGameState: this.changeGameState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      style: {\n        position: 'relative',\n        display: \"flex\",\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'flex-end'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Customers, {\n      selectOrder: this.selectOrder,\n      order: this.props.orders[this.state.currentOrderNumber1],\n      orderNumber: this.state.currentOrderNumber1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(Customers, {\n      selectOrder: this.selectOrder,\n      order: this.props.orders[this.state.currentOrderNumber2],\n      orderNumber: this.state.currentOrderNumber2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(Customers, {\n      selectOrder: this.selectOrder,\n      order: this.props.orders[this.state.currentOrderNumber3],\n      orderNumber: this.state.currentOrderNumber3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(Customers, {\n      selectOrder: this.selectOrder,\n      order: this.props.orders[this.state.currentOrderNumber4],\n      orderNumber: this.state.currentOrderNumber4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }))) : React.createElement(EndGame, {\n      exitGame: this.props.exitGame,\n      showModal: this.state.modalState,\n      lastScore: this.state.lastScore,\n      changeGameState: this.changeGameState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }));\n  }\n\n}\n{\n  /* <div> */\n}\n{\n  /* {this.props.orders[this.state.currentOrderNumber1].map( ingr =>  <div style={{display: 'flex', flexDirection: 'column'}} key={Math.floor(Math.random() * 1000000) + 1}>{ingr}</div> )} */\n}\n{\n  /* </div> */\n}","map":{"version":3,"sources":["/Users/harum/Development/FlatironSchool/top-bun-burgerface/top-bun-burgerface-frontend/src/Container/GameContainer.js"],"names":["React","Fragment","BurgerBuildContainer","Ingredients","Timer","EndGame","Customers","GameContainer","Component","constructor","buildBurger","ingr","state","clickCounter","setState","currentBurger","currentBurger2","alert","burgerSubmit","console","log","results","currentOrderNumber","i","length","name","props","orders","push","update","currentScore","currentOrderNumber1","Math","floor","random","Object","keys","currentOrderNumber2","currentOrderNumber3","currentOrderNumber4","changeGameState","initialState","gameEnded","modalState","lastScore","customerOrders","removeIngredient","pop","shift","reverse","selectOrder","orderNumber","render","map","position","display","flexDirection","alignItems","justifyContent","exitGame"],"mappings":"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","sourcesContent":["import React, {Fragment} from \"react\";\nimport BurgerBuildContainer from \"./BurgerBuildContainer\";\nimport Ingredients from \"../Components/Ingredients.js\";\n// import Countdown from 'react-countdown-now'\nimport Timer from \"../Components/Timer\"\nimport EndGame from \"../Components/EndGame\"\nimport Customers from \"../Components/Customers\"\n\nexport default class GameContainer extends React.Component {\n\n  constructor() {\n    super();\n    this.state = this.initialState\n  }\n\n  get initialState() {\n   return {\n      currentBurger: [],\n      currentBurger2: [],\n      currentOrderNumber: null,\n      currentScore: 0,\n      clickCounter: 0,\n      gameEnded: false,\n      modalState: false,\n      lastScore: 0,\n      currentOrderNumber1: 2,\n      currentOrderNumber2: 3,\n      currentOrderNumber3: 4,\n      currentOrderNumber4: 5,\n      \n    };\n  }\n\n  \n  buildBurger = ingr => {\n    if (this.state.clickCounter < 10) {\n       this.setState({\n          currentBurger: [...this.state.currentBurger, ingr],\n          currentBurger2: [...this.state.currentBurger, ingr],\n          clickCounter: this.state.clickCounter + 1\n        })\n    } else {\n      alert(\"stahp\");\n      // this.setState({\n      //   currentBurger: [],\n      //   currentBurger2: [],\n      //   clickCounter: 0\n      // })\n    }\n  };\n\n  burgerSubmit = () => {\n    console.log('clicking the bunnnn')\n\n    let results = [];\n\n    if (this.state.currentOrderNumber !== null) {\n    for (let i = 0; i < this.state.currentBurger.length; i++) {\n      if (this.state.currentBurger[i].name === this.props.orders[this.state.currentOrderNumber][i]) {\n        results.push(true);\n      } else {\n        alert ('You need to pick a burger to work on first!')\n      }\n    }\n\n    if ( results.length === 4 ) {\n      let update = this.state.currentScore\n      this.setState({ currentScore: update + 1 });\n    } else {\n      console.log('oops')    \n    }\n\n    this.setState({\n      currentBurger: [],\n      currentBurger2: [],\n      currentOrderNumber: null,\n      currentOrderNumber1: Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1,\n      currentOrderNumber2: Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1,\n      currentOrderNumber3: Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1,\n      currentOrderNumber4: Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1,\n      clickCounter: 0\n    });\n  }\n  };\n\n  changeGameState = () => {\n    this.setState({\n      ...this.initialState,\n      gameEnded: !this.state.gameEnded,\n      modalState: !this.state.modalState,\n      lastScore: this.state.currentScore \n    })\n  } \n\n  customerOrders = () =>{\n   return this.props.orders[Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1]\n  }\n\n  removeIngredient = () => {\n    this.state.currentBurger.pop()\n    this.state.currentBurger2.shift()\n\n    this.setState({\n      currentBurger: this.state.currentBurger,\n      currentBurger2: this.state.currentBurger2.reverse(),\n      clickCounter: this.state.clickCounter - 1 \n    })\n  }\n\n  selectOrder = (orderNumber) => {\n    this.setState({ currentOrderNumber: orderNumber})\n  }\n\n  render() {\n    return (\n      <Fragment>\n        {\n          this.state.gameEnded === false \n          ? \n          <div>\n            <h1> 🍔 Top Bun 🍔 </h1>\n\n            <Ingredients\n              buildBurger={this.buildBurger}\n              burgerSubmit={this.burgerSubmit}\n            />\n            \n            <div className=\"columns\">\n\n            {/** rendering current order to be fulfilled **/}\n            \n              <div className=\"column\">\n                {this.props.orders[this.state.currentOrderNumber] \n                ? this.props.orders[this.state.currentOrderNumber].map( ingr => <p key={Math.floor(Math.random() * 1000000) + 1}>{ingr}</p> )\n                :  null}\n              </div>\n              \n              <div className=\"column is-three-fifths\">\n                <BurgerBuildContainer\n                  burger={this.state.currentBurger2}\n                  orders={this.props.orders}\n                  removeIngredient={this.removeIngredient}\n                />\n              </div>\n\n              <div className=\"column\">\n                <h3>Current score: {this.state.currentScore}</h3>\n                <Timer changeGameState={this.changeGameState} />\n              </div>\n              \n            </div>\n\n\n              {/* the div below renders the four random customer orders the user can pick to build next */}\n              <div style={{\n                  position: 'relative', \n                  display: \"flex\", \n                  flexDirection: 'row',  \n                  alignItems: 'center', \n                  justifyContent: 'flex-end' \n              }}>\n                  <Customers selectOrder={this.selectOrder} order={this.props.orders[this.state.currentOrderNumber1]} orderNumber={this.state.currentOrderNumber1}/>\n                  <Customers selectOrder={this.selectOrder} order={this.props.orders[this.state.currentOrderNumber2]} orderNumber={this.state.currentOrderNumber2}/>\n                  <Customers selectOrder={this.selectOrder} order={this.props.orders[this.state.currentOrderNumber3]} orderNumber={this.state.currentOrderNumber3}/>\n                  <Customers selectOrder={this.selectOrder} order={this.props.orders[this.state.currentOrderNumber4]} orderNumber={this.state.currentOrderNumber4}/>\n              </div>\n\n          </div>\n          : <EndGame exitGame={this.props.exitGame} \n              showModal={this.state.modalState}\n              lastScore={this.state.lastScore} \n              changeGameState={this.changeGameState}\n            />        \n      }\n      </Fragment>\n    );\n  }\n}\n\n\n{/* <div> */}\n  {/* {this.props.orders[this.state.currentOrderNumber1].map( ingr =>  <div style={{display: 'flex', flexDirection: 'column'}} key={Math.floor(Math.random() * 1000000) + 1}>{ingr}</div> )} */}\n{/* </div> */}\n          "]},"metadata":{},"sourceType":"module"}