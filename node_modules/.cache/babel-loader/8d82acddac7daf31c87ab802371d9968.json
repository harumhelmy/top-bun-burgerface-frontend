{"ast":null,"code":"import _defineProperty from \"/Users/harum/Development/FlatironSchool/top-bun-burgerface/top-bun-burgerface-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/harum/Development/FlatironSchool/top-bun-burgerface/top-bun-burgerface-frontend/src/Container/GameContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment } from \"react\";\nimport BurgerBuildContainer from \"./BurgerBuildContainer\";\nimport Ingredients from \"../Components/Ingredients.js\"; // import Countdown from 'react-countdown-now'\n\nimport Timer from \"../Components/Timer\";\nimport EndGame from \"../Components/EndGame\";\nexport default class GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.buildBurger = ingr => {\n      if (this.state.clickCounter < 5) {\n        this.setState({\n          currentBurger: [...this.state.currentBurger, ingr],\n          currentBurger2: [...this.state.currentBurger, ingr],\n          clickCounter: this.state.clickCounter + 1\n        });\n      } else {\n        alert(\"stahp\");\n        this.setState({\n          currentBurger: [],\n          currentBurger2: [],\n          clickCounter: 0\n        });\n      }\n    };\n\n    this.burgerSubmit = () => {\n      let results = [];\n\n      for (let i = 0; i < this.state.currentBurger.length; i++) {\n        if (this.state.currentBurger[i].name === this.props.orders[this.state.currentOrderNumber][i]) {\n          results.push(true);\n        }\n      }\n\n      if (results.length === 4) {\n        let update = this.state.currentScore;\n        this.setState({\n          currentScore: update + 1\n        });\n      } else {\n        let update = this.state.currentScore;\n        this.setState({\n          currentScore: update - 1\n        });\n      }\n\n      this.setState({\n        currentBurger: [],\n        currentBurger2: [],\n        currentOrderNumber: Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1,\n        clickCounter: 0\n      });\n    };\n\n    this.changeGameState = () => {\n      this.setState(_objectSpread({}, this.initialState, {\n        gameEnded: !this.state.gameEnded\n      }));\n    };\n\n    this.removeIngredient = () => {\n      this.state.currentBurger.pop();\n      this.state.currentBurger2.shift();\n      this.setState({\n        currentBurger: this.state.currentBurger,\n        currentBurger2: this.state.currentBurger2.reverse(),\n        clickCounter: this.state.clickCounter - 1\n      });\n    };\n\n    this.state = this.initialState;\n  }\n\n  get initialState() {\n    return {\n      currentBurger: [],\n      currentBurger2: [],\n      currentOrderNumber: 1,\n      currentScore: 0,\n      clickCounter: 0,\n      gameEnded: false\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.gameEnded === false ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Ingredients, {\n      buildBurger: this.buildBurger,\n      burgerSubmit: this.burgerSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \" Current order to be fulfilled:  \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.props.orders[this.state.currentOrderNumber].map(ingr => React.createElement(\"p\", {\n      key: Math.floor(Math.random() * 1000000) + 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, ingr))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Current score: \", this.state.currentScore), React.createElement(Timer, {\n      changeGameState: this.changeGameState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(BurgerBuildContainer, {\n      burger: this.state.currentBurger2,\n      orders: this.props.orders,\n      removeIngredient: this.removeIngredient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })) : React.createElement(EndGame, {\n      exitGame: this.props.exitGame,\n      currentScore: this.state.currentScore,\n      changeGameState: this.changeGameState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/harum/Development/FlatironSchool/top-bun-burgerface/top-bun-burgerface-frontend/src/Container/GameContainer.js"],"names":["React","Fragment","BurgerBuildContainer","Ingredients","Timer","EndGame","GameContainer","Component","constructor","buildBurger","ingr","state","clickCounter","setState","currentBurger","currentBurger2","alert","burgerSubmit","results","i","length","name","props","orders","currentOrderNumber","push","update","currentScore","Math","floor","random","Object","keys","changeGameState","initialState","gameEnded","removeIngredient","pop","shift","reverse","render","map","exitGame"],"mappings":"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","sourcesContent":["import React, {Fragment} from \"react\";\nimport BurgerBuildContainer from \"./BurgerBuildContainer\";\nimport Ingredients from \"../Components/Ingredients.js\";\n// import Countdown from 'react-countdown-now'\nimport Timer from \"../Components/Timer\"\nimport EndGame from \"../Components/EndGame\"\n\nexport default class GameContainer extends React.Component {\n\n  constructor() {\n    super();\n    this.state = this.initialState\n  }\n\n  get initialState() {\n   return {\n      currentBurger: [],\n      currentBurger2: [],\n      currentOrderNumber: 1,\n      currentScore: 0,\n      clickCounter: 0,\n      gameEnded: false \n    };\n  }\n\n  \n  buildBurger = ingr => {\n    if (this.state.clickCounter < 5) {\n       this.setState({\n          currentBurger: [...this.state.currentBurger, ingr],\n          currentBurger2: [...this.state.currentBurger, ingr],\n          clickCounter: this.state.clickCounter + 1\n        })\n    } else {\n      alert(\"stahp\");\n      this.setState({\n        currentBurger: [],\n        currentBurger2: [],\n        clickCounter: 0\n      })\n    }\n  };\n\n  burgerSubmit = () => {\n    let results = [];\n\n    for (let i = 0; i < this.state.currentBurger.length; i++) {\n      if (this.state.currentBurger[i].name === this.props.orders[this.state.currentOrderNumber][i]) {\n        results.push(true);\n      }\n    }\n\n    if ( results.length === 4 ) {\n      let update = this.state.currentScore\n      this.setState({ currentScore: update + 1 });\n    } else {\n      let update = this.state.currentScore\n      this.setState({ currentScore: update - 1 });\n    }\n\n    this.setState({\n      currentBurger: [],\n      currentBurger2: [],\n      currentOrderNumber: Math.floor(Math.random() * Object.keys(this.props.orders).length) + 1,\n      clickCounter: 0\n    });\n  };\n\n  changeGameState = () => {\n    this.setState({\n      ...this.initialState,\n      gameEnded: !this.state.gameEnded\n    })\n  }\n\n  removeIngredient = () => {\n    this.state.currentBurger.pop()\n    this.state.currentBurger2.shift()\n\n    this.setState({\n      currentBurger: this.state.currentBurger,\n      currentBurger2: this.state.currentBurger2.reverse(),\n      clickCounter: this.state.clickCounter - 1 \n    })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        {\n          this.state.gameEnded === false \n          ? \n          <div>\n\n            <Ingredients\n              buildBurger={this.buildBurger}\n              burgerSubmit={this.burgerSubmit}\n            />\n           \n              <h4> Current order to be fulfilled:  </h4>\n                <ul>\n                {\n                  this.props.orders[this.state.currentOrderNumber].map( ingr => \n                    <p key={Math.floor(Math.random() * 1000000) + 1}>{ingr}</p> \n                  )\n                }\n                </ul>\n\n              <h3>Current score: {this.state.currentScore}</h3>\n\n              <Timer changeGameState={this.changeGameState} />\n\n            <BurgerBuildContainer\n              burger={this.state.currentBurger2}\n              orders={this.props.orders}\n              removeIngredient={this.removeIngredient}\n            />\n\n\n          </div>\n          : \n            <EndGame exitGame={this.props.exitGame} currentScore={this.state.currentScore} changeGameState={this.changeGameState}/>        \n      }\n      </Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}